//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CTServerState;

struct __CTServerConnection {
    struct __CFRuntimeBase {
        unsigned int _field1;
        unsigned char _field2[4];
    } _field1;
    struct dispatch_queue_s *_field2;
    struct CTServerState *_field3;
    unsigned char _field4;
    unsigned int _field5;
    struct _xpc_connection_s *_field6;
};

struct dispatch_object_s;

struct dispatch_queue_s;

struct queue {
    struct dispatch_object_s *fObj;
};

#pragma mark Typedef'd Structures

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

#pragma mark -

//
// File: CoreTelephony
// UUID: C5A2E59B-B15D-35B8-A8E3-56E129B78B5E
//
//                           Arch: armv7
//                Current version: 1464.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1464.0.0.0.0
//            Minimum iOS version: 6.1.0
//                    SDK version: 6.1.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CTMessageAddress
- (NSString *)encodedString;
- (NSString *)canonicalFormat;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@interface CTMessage : NSObject
{
    NSObject<CTMessageAddress><NSCopying> *_sender;
    NSMutableArray *_recipients;
    NSMutableArray *_items;
    NSDictionary *_rawHeaders;
    NSDate *_date;
    unsigned int _messageId;
    int _messageType;
    CTPhoneNumber *_serviceCenter;
    NSString *_subject;
    NSString *_contentType;
    NSMutableDictionary *_contentTypeParams;
    unsigned int _replaceMessage;
    NSString *_countryCode;
    NSUUID *_uuid;
}

@property(retain, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uuid;
@property(readonly, nonatomic) NSString *countryCode; // @synthesize countryCode=_countryCode;
@property(readonly) unsigned int replaceMessage; // @synthesize replaceMessage=_replaceMessage;
@property(copy, nonatomic) NSString *contentType; // @synthesize contentType=_contentType;
@property(readonly) NSDictionary *rawHeaders; // @synthesize rawHeaders=_rawHeaders;
@property(copy, nonatomic) NSObject<CTMessageAddress><NSCopying> *sender; // @synthesize sender=_sender;
@property(copy, nonatomic) NSString *subject; // @synthesize subject=_subject;
@property(copy, nonatomic) CTPhoneNumber *serviceCenter; // @synthesize serviceCenter=_serviceCenter;
@property(nonatomic) int messageType; // @synthesize messageType=_messageType;
@property(readonly) NSArray *items; // @synthesize items=_items;
@property(nonatomic) unsigned int messageId; // @synthesize messageId=_messageId;
@property(readonly) NSDate *date; // @synthesize date=_date;
@property(readonly) NSArray *recipients; // @synthesize recipients=_recipients;
- (void)setCountryCode:(id)arg1;
- (id)description;
- (id)allContentTypeParameterNames;
- (void)addContentTypeParameterWithName:(id)arg1 value:(id)arg2;
- (id)contentTypeParameterWithName:(id)arg1;
- (void)removePartAtIndex:(unsigned int)arg1;
- (id)addPart:(id)arg1;
- (id)addData:(id)arg1 withContentType:(id)arg2;
- (id)addText:(id)arg1;
- (void)addEmailRecipient:(id)arg1;
- (void)addPhoneRecipient:(id)arg1;
- (void)setRecipients:(id)arg1;
- (void)setRecipient:(id)arg1;
- (void)removeRecipientsInArray:(id)arg1;
- (void)removeRecipient:(id)arg1;
- (void)addRecipient:(id)arg1;
- (void)setReplaceMessage:(unsigned int)arg1;
- (void)setRawHeaders:(id)arg1;
- (void)dealloc;
- (id)initWithDate:(id)arg1;
- (id)init;

@end

@interface CTPhoneNumber : NSObject <NSCopying, CTMessageAddress>
{
    NSString *_digits;
    NSString *_countryCode;
    BOOL _isShortCode;
}

+ (id)phoneNumberWithDigits:(id)arg1 countryCode:(id)arg2;
@property BOOL isShortCode; // @synthesize isShortCode=_isShortCode;
@property(readonly) NSString *countryCode; // @synthesize countryCode=_countryCode;
@property(readonly) NSString *digits; // @synthesize digits=_digits;
- (id)encodedString;
- (id)canonicalFormat;
- (id)formatForCallingCountry:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDigits:(id)arg1 countryCode:(id)arg2;
- (int)numberOfDigitsForShortCodeNumber;

@end

@interface CTMessageCenter : NSObject
{
}

+ (id)sharedMessageCenter;
- (BOOL)getCharacterCount:(int *)arg1 andMessageSplitThreshold:(int *)arg2 forSmsText:(id)arg3;
- (BOOL)sendSMSWithText:(id)arg1 serviceCenter:(id)arg2 toAddress:(id)arg3 withMoreToFollow:(BOOL)arg4 withID:(unsigned int)arg5;
- (BOOL)sendSMSWithText:(id)arg1 serviceCenter:(id)arg2 toAddress:(id)arg3 withMoreToFollow:(BOOL)arg4;
- (BOOL)sendSMSWithText:(id)arg1 serviceCenter:(id)arg2 toAddress:(id)arg3 withID:(unsigned int)arg4;
- (BOOL)sendSMSWithText:(id)arg1 serviceCenter:(id)arg2 toAddress:(id)arg3;
- (BOOL)isMmsConfigured;
- (BOOL)isMmsEnabled;
- (void)setDeliveryReportsEnabled:(BOOL)arg1;
- (CDStruct_1ef3fb1f)isDeliveryReportsEnabled:(char *)arg1;
- (id)decodeMessage:(id)arg1;
- (id)encodeMessage:(id)arg1;
- (id)statusOfOutgoingMessages;
- (id)deferredMessageWithId:(unsigned int)arg1;
- (id)incomingMessageWithId:(unsigned int)arg1;
- (void)acknowledgeOutgoingMessageWithId:(unsigned int)arg1;
- (void)acknowledgeIncomingMessageWithId:(unsigned int)arg1;
- (id)allIncomingMessages;
- (void)addMessageOfType:(int)arg1 toArray:(id)arg2 withIdsFromArray:(id)arg3;
- (int)incomingMessageCount;
- (id)incomingMessageWithId:(unsigned int)arg1 isDeferred:(BOOL)arg2;
- (CDStruct_1ef3fb1f)send:(id)arg1 withMoreToFollow:(BOOL)arg2;
- (CDStruct_1ef3fb1f)send:(id)arg1;
- (CDStruct_1ef3fb1f)sendMMS:(id)arg1;
- (void)sendMessageAsSmsToShortCodeRecipients:(id)arg1 andReplaceData:(id *)arg2;
- (CDStruct_1ef3fb1f)sendMMSFromData:(id)arg1 messageId:(unsigned int)arg2;
- (CDStruct_1ef3fb1f)sendSMS:(id)arg1 withMoreToFollow:(BOOL)arg2;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CTMmsEncoder : NSObject
{
}

+ (id)decodeMessageFromData:(id)arg1;
+ (id)encodeMessage:(id)arg1;
+ (id)encodeSms:(id)arg1;
+ (id)decodeSmsFromData:(id)arg1;

@end

@interface CTMessagePart : NSObject
{
    NSString *_contentType;
    NSMutableDictionary *_contentTypeParams;
    NSString *_contentId;
    NSString *_contentLocation;
    NSData *_data;
}

@property(copy, nonatomic) NSData *data; // @synthesize data=_data;
@property(copy, nonatomic) NSString *contentLocation; // @synthesize contentLocation=_contentLocation;
@property(copy, nonatomic) NSString *contentId; // @synthesize contentId=_contentId;
@property(copy, nonatomic) NSString *contentType; // @synthesize contentType=_contentType;
- (void)dealloc;
- (id)allContentTypeParameterNames;
- (void)addContentTypeParameterWithName:(id)arg1 value:(id)arg2;
- (id)contentTypeParameterWithName:(id)arg1;
- (id)initWithData:(id)arg1 contentType:(id)arg2;

@end

@interface CTMessageStatus : NSObject
{
    unsigned int _messageId;
    int _messageType;
    int _result;
}

@property(readonly) int result; // @synthesize result=_result;
@property(readonly) int messageType; // @synthesize messageType=_messageType;
@property(readonly) unsigned int messageId; // @synthesize messageId=_messageId;
- (id)initWithMessageId:(unsigned int)arg1 messageType:(int)arg2 result:(int)arg3;

@end

__attribute__((visibility("hidden")))
@interface CTEmailAddress : NSObject <NSCopying, CTMessageAddress>
{
    NSString *_address;
}

+ (id)emailAddress:(id)arg1;
@property(readonly) NSString *address; // @synthesize address=_address;
- (id)canonicalFormat;
- (id)encodedString;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithAddress:(id)arg1;

@end

@interface CTCarrier : NSObject
{
    NSString *_carrierName;
    NSString *_mobileCountryCode;
    NSString *_mobileNetworkCode;
    NSString *_isoCountryCode;
    BOOL _allowsVOIP;
}

@property(nonatomic) BOOL allowsVOIP; // @synthesize allowsVOIP=_allowsVOIP;
@property(retain, nonatomic) NSString *isoCountryCode; // @synthesize isoCountryCode=_isoCountryCode;
@property(retain, nonatomic) NSString *mobileNetworkCode; // @synthesize mobileNetworkCode=_mobileNetworkCode;
@property(retain, nonatomic) NSString *mobileCountryCode; // @synthesize mobileCountryCode=_mobileCountryCode;
@property(retain, nonatomic) NSString *carrierName; // @synthesize carrierName=_carrierName;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)description;

@end

@interface CTTelephonyNetworkInfo : NSObject
{
    void *_internal;
    CTCarrier *_subscriberCellularProvider;
    CDUnknownBlockType _subscriberCellularProviderDidUpdateNotifier;
    CTRadioAccessTechnology *_radioAccessTechnology;
}

@property(retain, nonatomic) CTRadioAccessTechnology *radioAccessTechnology; // @synthesize radioAccessTechnology=_radioAccessTechnology;
@property(retain) CTCarrier *subscriberCellularProvider; // @synthesize subscriberCellularProvider=_subscriberCellularProvider;
- (void)postUpdatesIfNecessary;
- (void)handleNotificationFromConnection:(void *)arg1 ofType:(id)arg2 withInfo:(id)arg3;
- (BOOL)updateNetworkInfoAndShouldNotifyClient:(char *)arg1;
- (BOOL)getAllowsVOIP:(char *)arg1 withCTError:(CDStruct_1ef3fb1f *)arg2;
- (BOOL)getMobileNetworkCode:(id)arg1 withCTError:(CDStruct_1ef3fb1f *)arg2;
- (BOOL)getMobileCountryCode:(id)arg1 andIsoCountryCode:(id)arg2 withCTError:(CDStruct_1ef3fb1f *)arg3;
- (BOOL)getCarrierName:(id)arg1 withCTError:(CDStruct_1ef3fb1f *)arg2;
@property(copy, nonatomic) CDUnknownBlockType subscriberCellularProviderDidUpdateNotifier;
- (void)dealloc;
- (id)init;
- (void)cleanUpServerConnection;
- (BOOL)setUpServerConnection;

@end

@interface CTCallCenter : NSObject
{
    void *_server;
    NSSet *_currentCalls;
    CDUnknownBlockType _callEventHandler;
}

- (id)description;
- (void)broadcastCallStateChangesIfNeededWithFailureLogMessage:(id)arg1;
- (void)handleNotificationFromConnection:(void *)arg1 ofType:(id)arg2 withInfo:(id)arg3;
@property(retain) NSSet *currentCalls; // @dynamic currentCalls;
- (BOOL)calculateCallStateChanges:(id)arg1;
- (BOOL)getCurrentCallSetFromServer:(id)arg1;
@property(copy, nonatomic) CDUnknownBlockType callEventHandler;
- (void)dealloc;
- (id)init;
- (void)cleanUpServerConnection;
- (BOOL)setUpServerConnection;

@end

@interface CTCall : NSObject
{
    NSString *_callState;
    NSString *_callID;
}

+ (id)callForCTCallRef:(struct __CTCall *)arg1;
@property(copy, nonatomic) NSString *callID; // @synthesize callID=_callID;
@property(copy, nonatomic) NSString *callState; // @synthesize callState=_callState;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;

@end

@interface CTSubscriberInfo : NSObject
{
}

+ (id)subscriber;

@end

@interface CTSubscriber : NSObject
{
    void *_internal;
    struct __CTServerConnection *_server;
}

- (BOOL)refreshCarrierToken;
@property(readonly, nonatomic) NSData *carrierToken; // @dynamic carrierToken;
- (void)dealloc;
- (id)init;

@end

@interface CTRadioAccessTechnology : NSObject
{
    struct __CTServerConnection *_server;
    struct queue _queue;
    NSString *_radioAccessTechnology;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)queryDataMode;
- (BOOL)setRadioAccessTechnology_nl:(id)arg1;
@property NSString *radioAccessTechnology; // @synthesize radioAccessTechnology=_radioAccessTechnology;
- (void)dealloc;
- (id)init;

@end

